{% extends '/template/base.twig' %}

{% block body %}
    {% include '/template/header.twig' %}

    <div class="content">
        
        <div class="games">
            <form id="newGameForm" method="post">
                <input type="text" id="new_game" name="name_game" placeholder="New game" />
                <input type="button" class="btn primary" name="new_game" onclick="createGame()" value="Add" />
            </form>

            <div id="list" class="border">
                <div class="bubble"><span id="number_games">{{ number[0].number_games }}</span></div>
                <ul>
                    {% for game in games %}
                        <li id="game{{ game.game_id }}"><input {% if game.game_finished == 1 %} checked {% endif %} onclick="updateGame(event)" data-id="{{ game.game_id }}" type="checkbox" class="updateGame" value="1" /><span class="{% if game.game_finished == 1 %} finished {% endif %}">{{ game.game_name }} </span><i onclick="deleteGame(event)" data-id="{{ game.game_id }}" class="material-symbols-outlined deletedGame">block</i></li>
                    {% endfor %}
                </ul>
            </div>

        </div>

        <div id="tchat" class="tchat border">
            <div>
                <input type="text" id="nickname" name="nickname" placeholder="Nickname" />
                <i onclick="saveNickName(event)" class="material-symbols-outlined">done</i>
            </div>

            <div id="screen-tchat">
                <ul>
                </ul>
            </div>

            <div>
                <input type="text" id="texttchat" name="texttchat" placeholder="You need to use a Nickname before" disabled />
                <i onclick="sendMsg(event)" class="material-symbols-outlined">send</i>
            </div>
        </div>

    </div>

    <script>
        // Need to add real time element
        const socket = io('http://localhost:8000/');

        var nickname = "";

        socket.on("connect", () => {
            console.log(socket.id); // "G5p5..."
            socket.emit('message', 'Hello server');
        });

        socket.on("tchat-message", (data) => {
            let ul = document.getElementById('screen-tchat').getElementsByTagName('ul')[0];
            let li = document.createElement('li');

            let name = document.createElement('span');
            // make 2 colors name - your and an other
            name.className = 'colored';
            name.textContent = data.nickname === nickname ? 'You : ' : data.nickname + ' : ';
            li.appendChild(name);

            let txt = document.createElement('span');
            txt.className = 'textual';
            txt.textContent = data.msg;
            li.appendChild(txt);

            ul.appendChild(li);

            console.log(data)
        })

        socket.on("disconnect", () => {
            socket.connect();
        });

        socket.on('created', (data) => {
            // new element to add
            let ul = document.getElementById('list').getElementsByTagName('ul')[0];
            for (i = 0; i < data.length; i++) {
                let li = document.createElement('li');
                li.id = 'game'+data[i].game_id;

                let input = document.createElement('input');
                input.type = 'checkbox';
                input.className = 'updateGame';
                input.addEventListener('click',updateGame);
                input.setAttribute('data-id',data[i].game_id);
                input.onclick = "updateGame(event,"+data[i].game_id+")";
                li.appendChild(input);

                let span = document.createElement('span');
                span.className = data[i].game_finished == 1 ? 'finished' : '';
                span.textContent = data[i].game_name;
                li.appendChild(span);

                let close = document.createElement('i');
                close.className = 'material-symbols-outlined deletedGame';
                close.textContent = 'block';
                close.addEventListener('click',deleteGame);
                close.setAttribute('data-id',data[i].game_id);
                li.appendChild(close);

                ul.prepend(li);
            }
        })

        socket.on('updated', (data) => {
            // an element has get a modification
            for (i = 0; i < data.length; i++) {
                let li = document.getElementById('game'+data[i].game_id);
                let input = li.getElementsByTagName('input')[0];
                let checked = data[i].game_finished == 1 ? true : false;
                input.checked = checked;
                if (!checked) {
                    li.getElementsByTagName('span')[0].classList.remove('finished');
                } else {
                    li.getElementsByTagName('span')[0].classList.add('finished');
                }
            }
        })

        socket.on('deleted', (data) => {
            // an element has to be removed
            for (i = 0; i < data.length; i++) {
                let li = document.getElementById('game'+data[i].game_id);
                li.remove();
            }
        })
        
        socket.on('numberGames', (data) => {
            console.log(data[0].count)
            let span = document.getElementById('number_games');
            span.textContent = data[0].count;
        })

        function createGame() {
            axios.post('/create', {
                name: document.getElementById('new_game').value
            })
            .then((response) => {
                // Clear the input
                document.getElementById('new_game').value = "";
            })
            .catch((error) => {
                console.log(error);
            });
        }

        function updateGame(event) {
            axios.post('/update', {
                id: event.target.getAttribute('data-id'),
                value: event.target.checked == true ? 1 : 0
            })
            .then((response) => {
                // send a socket msg to the serv for updating everything
                //console.log(response);
                //socket.emit('updated',true)
            })
            .catch((error) => {
                console.log(error);
            });
        }

        function deleteGame(event) {
            axios.delete('/delete', {
                data: {
                    id: event.target.getAttribute('data-id')
                }
            })
            .then((response) => {

            })
            .catch((error) => {
                console.log(error);
            })
        }

        function saveNickName(event) {
            // get and save Nickname only on this client session
            nickname = document.getElementById('nickname').value;
            document.getElementById('nickname').setAttribute('disabled',true);
            document.getElementById('texttchat').disabled = false;
            document.getElementById('texttchat').placeholder = 'Enter your message..';
        }

        function sendMsg(event) {
            // Send emit message with the user
            event.preventDefault();
            let message = document.getElementById('texttchat').value;
            if (message.trim().length !== 0) {
                let data = {
                    msg: message,
                    nickname: nickname
                }
                socket.emit('tchat-message', data)
            }
            document.getElementById('texttchat').value = ""
        }
    </script>
{% endblock %}
